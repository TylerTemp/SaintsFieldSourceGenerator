using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Text;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Text.Json;
using System.Text.Json.Serialization;

// #if UNITY_EDITOR
// using UnityEngine;
// #endif

namespace SaintsFieldSourceGenerator
{
    [Generator]
    public class SaintsFieldGenerator : ISourceGenerator
    {
        public enum SaintsPropertyType
        {
            Undefined = 0,  // SaintsEditor never kicked in even once.
            EnumLong = 1,
            EnumULong = 2,
            ClassOrStruct = 3,
        }
        public enum SaintsTargetCollection
        {
            FieldOrProperty,
            Array,
            List,
        }


        public class SerializedInfo
        {
            [JsonInclude]
            public readonly string Name;
            [JsonInclude]
            public readonly string ElementTypeName;
            [JsonInclude]
            public readonly SaintsPropertyType SaintsPropertyType;
            // public readonly int SaintsPropertyType;
            [JsonInclude]
            public readonly bool IsProperty;
            // public readonly bool IsArray;
            // public readonly bool IsList;
            [JsonInclude]
            public readonly SaintsTargetCollection TargetCollection;
            // public readonly int TargetCollection;

            [JsonInclude]
            public readonly IReadOnlyList<SerializedInfo> SubFields;
            public override string ToString()
            {
                return $"<SerializedInfo Name={Name}, IsProperty={IsProperty}, TargetCollection={TargetCollection}, SaintsPropertyType: {SaintsPropertyType}, SubFields=[{string.Join(",", SubFields.Select(each => $"\n    {each}"))}] />";
                // return $"SerializedInfo: Name={Name}, IsProperty={IsProperty}, TargetCollection={TargetCollection}, SaintsPropertyType: {SaintsPropertyType}";
            }

            public SerializedInfo(string name, string elementTypeName, bool isProperty, SaintsTargetCollection targetCollection, SaintsPropertyType saintsPropertyType, IReadOnlyList<SerializedInfo> subFields)
            {
                Name = name;
                ElementTypeName = elementTypeName;
                IsProperty = isProperty;
                TargetCollection = targetCollection;
                SaintsPropertyType = saintsPropertyType;
                SubFields = subFields;
            }

            public string ToAttrCompactString() => $"\"{Name},{(IsProperty ? "1" : "0")},{(int)TargetCollection},{(int)SaintsPropertyType}\"" ;
        }

        private class GenInfo
        {
            public string Namespace { get; set; }
            public string Keyword { get; set; }
            public bool IsStruct { get; set; }
            public string Name { get; set; }
            public IReadOnlyList<SerializedInfo> SerializedInfos  { get; set; }= Array.Empty<SerializedInfo>();
            public List<GenInfo> SubTypes { get; set; } = new List<GenInfo>();

            public override string ToString()
            {
                return
                    $"<GenInfo name={Name} isStruct={IsStruct} keyword={Keyword} ser={string.Join(", ", SerializedInfos)} subTypes={string.Join(", ", SubTypes)}/>";
            }
        }

        public void Execute(GeneratorExecutionContext context)
        {
            string commonPrefix =
                LongestCommonPrefix(context.Compilation.SyntaxTrees.Select(each => each.FilePath).ToArray());
            // DebugToFile($"Common Prefix: {commonPrefix}");
            if (commonPrefix == "")
            {
                return;
            }

            string assetPathNotIncluded = FindAssetPathNotIncluded(commonPrefix);
            if (assetPathNotIncluded == "")
            {
                return;
            }

            string saintsFieldConfigJsonFolder = $"{assetPathNotIncluded}/Temp/SaintsField";
            if(!Directory.Exists(saintsFieldConfigJsonFolder))
            {
                return;
            }

            foreach (string jsonConfigFile in Directory.GetFiles(saintsFieldConfigJsonFolder, "*.json", SearchOption.TopDirectoryOnly))
            {
                if (File.Exists(jsonConfigFile + ".g"))
                {
                    continue;
                }

                GenInfo gi = JsonSerializer.Deserialize<GenInfo>(File.ReadAllText(jsonConfigFile));
                string fileNameNoExt = Path.GetFileNameWithoutExtension(jsonConfigFile);

                StringBuilder sourceBuilder = new StringBuilder();
                sourceBuilder.Append("// <auto-generated />\n");
                sourceBuilder.Append("// Generated at " + DateTime.Now.ToString("O") + "\n");
                using(new WriteNameSpace(gi.Namespace, sourceBuilder))
                using(new Indent())
                {
                    WriteSubInfo(gi, sourceBuilder);
                }

                DebugToFile($"generate as {fileNameNoExt}");

                // context.AddSource($"{fileNameNoExt.Replace(".", "_")}.SaintsSerialized.cs", SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
                context.AddSource($"SerEnumULong.cs", SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));

                File.WriteAllText(jsonConfigFile + ".g", "");
            }
            // DebugToFile($"Found Asset Path: {assetPathNotIncluded}");

            // try
            // {
            //     foreach (SyntaxTree tree in context.Compilation.SyntaxTrees)
            //     {
            //         string norPath = tree.FilePath.Replace("\\", "/");
            //         if (!norPath.StartsWith(assetPathNotIncluded + "/Assets/"))
            //         {
            //             DebugToFile($"not in asset path: {tree.FilePath}");
            //             continue;
            //         }
            //
            //         string rawContent = File.ReadAllText(norPath);
            //         string rawMd5 = CreateMD5(rawContent);
            //
            //         string relativePath = norPath.Substring(assetPathNotIncluded.Length + "/Assets".Length + 1);
            //         // DebugToFile(relativePath);
            //
            //
            //
            //         string configJsonFile = $"{assetPathNotIncluded}/Temp/SaintsField/{relativePath}.{rawMd5}.json";
            //         if(!File.Exists(configJsonFile))
            //         {
            //             // DebugToFile($"no config json: {configJsonFile}");
            //             continue;
            //         }
            //
            //         DebugToFile(configJsonFile);
            //         string jsonStr = File.ReadAllText(configJsonFile);
            //
            //         // DebugToFile(jsonStr);
            //         JsonDocument jd = JsonDocument.Parse(jsonStr);
            //         JsonElement jRoot = jd.RootElement;
            //         SerializedInfo[] serializedInfos =
            //             jRoot.EnumerateArray().Select(JsonElementToSerializedInfo).ToArray();
            //
            //         // SerializedInfo[] serializedInfos = JsonSerializer.Deserialize<SerializedInfo[]>(jsonStr);
            //         // // DebugToFile(string.Join("\n", serializedInfo.Select(each => each.ToString())));
            //         // // DebugToFile(serializedInfos.ToString());
            //
            //         DebugToFile($"serializedInfos.Length={serializedInfos.Length}");
            //         foreach (SerializedInfo serializedInfo in serializedInfos)
            //         {
            //             DebugToFile($"serializedInfo={serializedInfo}");
            //         }
            //
            //         if (serializedInfos.Length == 0)
            //         {
            //             continue;
            //         }
            //
            //         string fileName = Path.GetFileName(tree.FilePath);
            //         // DebugToFile(fileName);
            //         CompilationUnitSyntax root = tree.GetCompilationUnitRoot();
            //
            //         // List<string> usingNames = new List<string>();
            //
            //         // foreach (UsingDirectiveSyntax usingDirectiveSyntax in root.Usings)
            //         // {
            //         //     // DebugToFile(usingDirectiveSyntax.Name);
            //         //     usingNames.Add(usingDirectiveSyntax.Name.ToString());
            //         // }
            //
            //         // return;
            //
            //         foreach (MemberDeclarationSyntax memberDeclarationSyntax in root.Members)
            //         {
            //             // DebugToFile(memberDeclarationSyntax.Kind());
            //             // ReSharper disable once SwitchStatementMissingSomeEnumCasesNoDefault
            //             switch (memberDeclarationSyntax.Kind())
            //             {
            //                 case SyntaxKind.NamespaceDeclaration:
            //                 {
            //                     NamespaceDeclarationSyntax namespaceDeclarationSyntax =
            //                         (NamespaceDeclarationSyntax)memberDeclarationSyntax;
            //                     string nameSpace = namespaceDeclarationSyntax.Name.ToString();
            //
            //                     foreach (MemberDeclarationSyntax namespaceMemberSyntax in namespaceDeclarationSyntax
            //                                  .Members)
            //                     {
            //                         if (namespaceMemberSyntax.Kind() != SyntaxKind.ClassDeclaration)
            //                         {
            //                             continue;
            //                         }
            //
            //                         ClassDeclarationSyntax classDeclaration =
            //                             (ClassDeclarationSyntax)namespaceMemberSyntax;
            //
            //                         // MonoBehavior requires class name == file name
            //                         if (classDeclaration.Identifier.Text !=
            //                             fileName.Substring(0, fileName.Length - 3))
            //                         {
            //                             continue;
            //                         }
            //
            //                         bool isPartial = false;
            //                         List<string> modifiersList = new List<string>();
            //                         foreach (SyntaxToken modifier in classDeclaration.Modifiers)
            //                         {
            //                             // DebugToFile(modifier);
            //
            //                             if (modifier.IsKind(SyntaxKind.PartialKeyword))
            //                             {
            //                                 isPartial = true;
            //                                 // break;
            //                             }
            //
            //                             modifiersList.Add(modifier.Text);
            //                         }
            //
            //                         if (!isPartial)
            //                         {
            //                             continue;
            //                         }
            //
            //
            //                         if (classDeclaration.BaseList == null ||
            //                             classDeclaration.BaseList.Types.Count == 0)
            //                         {
            //                             continue;
            //                         }
            //
            //                         DebugToFile($"GEN: {nameSpace}: {classDeclaration.Identifier.Text}");
            //
            //                         StringBuilder sourceBuilder = new StringBuilder();
            //                         // foreach (string usingName in usingNames)
            //                         // {
            //                         //     sourceBuilder.Append($"using {usingName};\n");
            //                         // }
            //                         sourceBuilder.Append($"namespace {nameSpace}\n{{\n");
            //                         // sourceBuilder.Append($@"    {classDeclaration.Keyword} partial class {classDeclaration.Identifier.Text}\n    {{\n");
            //                         sourceBuilder.Append(
            //                             $"    {string.Join(" ", modifiersList)} class {classDeclaration.Identifier.Text}: global::UnityEngine.ISerializationCallbackReceiver\n    {{\n");
            //
            //                         foreach (SerializedInfo serializedInfo in serializedInfos)
            //                         {
            //                             WriteSerializedInfoFields(sourceBuilder, serializedInfo, Array.Empty<SerializedInfo>());
            //                         }
            //
            //                         sourceBuilder.Append("\n");
            //                         sourceBuilder.Append("        public void OnBeforeSerialize()\n");
            //                         sourceBuilder.Append("        {\n");
            //                         foreach (SerializedInfo serializedInfo in serializedInfos)
            //                         {
            //                             WriteOnBeforeSerialize(serializedInfo, sourceBuilder);
            //                         }
            //                         sourceBuilder.Append("        }\n");
            //
            //                         sourceBuilder.Append("        public void OnAfterDeserialize()\n");
            //                         sourceBuilder.Append("        {\n");
            //                         foreach (SerializedInfo serializedInfo in serializedInfos)
            //                         {
            //                             WriteOnAfterDeserialize(serializedInfo, sourceBuilder);
            //                         }
            //                         sourceBuilder.Append("        }\n");
            //
            //                         sourceBuilder.Append("    }\n}");
            //                         context.AddSource($"{classDeclaration.Identifier.Text}.SaintsSerialized.cs",
            //                             SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
            //
            //                         // List<GenSerInfo> genSerInfos = new List<GenSerInfo>();
            //                         //
            //                         // foreach (MemberDeclarationSyntax classDeclarationMember in classDeclaration.Members)
            //                         // {
            //                         //     switch (classDeclarationMember.Kind())
            //                         //     {
            //                         //         case SyntaxKind.FieldDeclaration:
            //                         //         {
            //                         //             FieldDeclarationSyntax fieldDeclarationSyntax =
            //                         //                 (FieldDeclarationSyntax)classDeclarationMember;
            //                         //             TypeSyntax varType = fieldDeclarationSyntax.Declaration.Type;
            //                         //             DebugToFile(varType.ToString());
            //                         //             VariableDeclaratorSyntax variable = fieldDeclarationSyntax.Declaration.Variables[0];
            //                         //             DebugToFile(variable.Identifier.Text);
            //                         //
            //                         //             ICollection<string> attributeStrings = FoundGenSerInfo(fieldDeclarationSyntax.AttributeLists);
            //                         //
            //                         //             if (attributeStrings != null)
            //                         //             {
            //                         //                 // DebugToFile($"Found SaintsSerialized on {variable.Identifier.Text}");
            //                         //
            //                         //                 genSerInfos.Add(new GenSerInfo(
            //                         //                     varType.ToString(),
            //                         //                     variable.Identifier.Text,
            //                         //                     attributeStrings
            //                         //                 ));
            //                         //
            //                         //             }
            //                         //         }
            //                         //             break;
            //                         //         case SyntaxKind.PropertyDeclaration:
            //                         //         {
            //                         //             PropertyDeclarationSyntax propertyDeclarationSyntax =
            //                         //                 (PropertyDeclarationSyntax)classDeclarationMember;
            //                         //             TypeSyntax varType = propertyDeclarationSyntax.Type;
            //                         //             DebugToFile(varType.ToString());
            //                         //             SyntaxToken identifier = propertyDeclarationSyntax.Identifier;
            //                         //             DebugToFile(identifier.Text);
            //                         //
            //                         //             ICollection<string> attributeStrings = FoundGenSerInfo(propertyDeclarationSyntax.AttributeLists);
            //                         //             if (attributeStrings != null)
            //                         //             {
            //                         //                 DebugToFile($"Found SaintsSerialized on {identifier.Text}");
            //                         //
            //                         //                 genSerInfos.Add(new GenSerInfo(
            //                         //                     varType.ToString(),
            //                         //                     identifier.Text,
            //                         //                     attributeStrings
            //                         //                 ));
            //                         //             }
            //                         //         }
            //                         //             break;
            //                         //     }
            //                         // }
            //                         //
            //                         // if (genSerInfos.Count > 0)
            //                         // {
            //                         //     // StringBuilder sourceBuilder = new StringBuilder($"GEN: {nameSpace}: {classDeclaration.Identifier.Text} \n");
            //                         //     // context.AddSource($"{classDeclaration.Identifier.Text}_SaintsFieldGenerated.txt",
            //                         //     //     SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
            //                         //     StringBuilder sourceBuilder = new StringBuilder();
            //                         //     foreach (string usingName in usingNames)
            //                         //     {
            //                         //         sourceBuilder.Append($"using {usingName};\n");
            //                         //     }
            //                         //     sourceBuilder.Append($"namespace {nameSpace}\n{{\n");
            //                         //     // sourceBuilder.Append($@"    {classDeclaration.Keyword} partial class {classDeclaration.Identifier.Text}\n    {{\n");
            //                         //     sourceBuilder.Append(
            //                         //         $"    {string.Join(" ", modifiersList)} class {classDeclaration.Identifier.Text}: global::UnityEngine.ISerializationCallbackReceiver\n    {{\n");
            //                         //
            //                         //     // sourceBuilder.Append(
            //                         //     //     $"        public static string GeneratedStringSaintsField() => \"This is generated in {System.DateTime.Now:O}\";\n");
            //                         //
            //                         //     foreach (GenSerInfo genSerInfo in genSerInfos)
            //                         //     {
            //                         //         sourceBuilder.Append("\n");
            //                         //
            //                         //         // sourceBuilder.Append("        [global::SaintsField.Playa.ShowIf(\n");
            //                         //         // sourceBuilder.Append("#if SAINTSFIELD_SERIALIZED_DEBUG\n");
            //                         //         // sourceBuilder.Append("         true\n");
            //                         //         // sourceBuilder.Append("#else\n");
            //                         //         // sourceBuilder.Append("         false\n");
            //                         //         // sourceBuilder.Append("#endif\n");
            //                         //         // sourceBuilder.Append("        )]\n");
            //                         //
            //                         //         sourceBuilder.Append($"        [global::SaintsField.Utils.SaintsSerializedActual(nameof({genSerInfo.FieldName}), typeof({genSerInfo.FieldType}))]\n");
            //                         //         sourceBuilder.Append("        [global::UnityEngine.SerializeField]\n");
            //                         //         sourceBuilder.Append("        [global::SaintsField.SaintsRow(inline: true)]\n");
            //                         //         if(genSerInfo.Attributes.Count > 0)
            //                         //         {
            //                         //             sourceBuilder.Append(
            //                         //                 $"        [{string.Join(", ", genSerInfo.Attributes)}]\n");
            //                         //         }
            //                         //
            //                         //         // ReSharper disable once ConvertIfStatementToConditionalTernaryExpression
            //                         //         if (genSerInfo.CollectionType == CollectionType.None)
            //                         //         {
            //                         //             sourceBuilder.Append(
            //                         //                 $"        private global::SaintsField.SaintsSerialization.SaintsSerializedProperty {genSerInfo.FieldName}__SaintsSerialized__ = new global::SaintsField.SaintsSerialization.SaintsSerializedProperty();\n");
            //                         //         }
            //                         //         else
            //                         //         {
            //                         //             sourceBuilder.Append(
            //                         //                 $"        private global::SaintsField.SaintsSerialization.SaintsSerializedProperty[] {genSerInfo.FieldName}__SaintsSerialized__ = global::System.Array.Empty<global::SaintsField.SaintsSerialization.SaintsSerializedProperty>();\n");
            //                         //
            //                         //         }
            //                         //     }
            //                         //
            //                         //     sourceBuilder.Append("\n");
            //                         //     sourceBuilder.Append("        public void OnBeforeSerialize()\n");
            //                         //     sourceBuilder.Append("        {\n");
            //                         //     foreach (GenSerInfo genSerInfo in genSerInfos)
            //                         //     {
            //                         //         if(genSerInfo.CollectionType != CollectionType.None)
            //                         //         {
            //                         //             sourceBuilder.Append("\n");
            //                         //             sourceBuilder.Append($"            if ({genSerInfo.FieldName} == null)\n");
            //                         //             sourceBuilder.Append("            {\n");
            //                         //             sourceBuilder.Append($"                {genSerInfo.FieldName} = ");
            //                         //             switch (genSerInfo.CollectionType)
            //                         //             {
            //                         //                 case CollectionType.Array:
            //                         //                     sourceBuilder.Append("global::System.Array.Empty<");
            //                         //                     sourceBuilder.Append(genSerInfo.FieldType);
            //                         //                     sourceBuilder.Append(">();\n");
            //                         //                     break;
            //                         //                 case CollectionType.List:
            //                         //                     sourceBuilder.Append("new global::System.Collections.Generic.List<");
            //                         //                     sourceBuilder.Append(genSerInfo.FieldType);
            //                         //                     sourceBuilder.Append(">();\n");
            //                         //                     break;
            //                         //             }
            //                         //             sourceBuilder.Append("            }\n");
            //                         //         }
            //                         //
            //                         //         switch (genSerInfo.CollectionType)
            //                         //         {
            //                         //             case CollectionType.None:
            //                         //                 sourceBuilder.Append(
            //                         //                     $"            {genSerInfo.FieldName}__SaintsSerialized__ = global::SaintsField.Utils.SaintsSerializedUtil.OnBeforeSerialize({genSerInfo.FieldName}, typeof({genSerInfo.FieldType}));\n");
            //                         //                 break;
            //                         //             case CollectionType.Array:
            //                         //             case CollectionType.List:
            //                         //                 sourceBuilder.Append(
            //                         //                     $"            global::SaintsField.Utils.SaintsSerializedUtil.OnBeforeSerializeCollection<{genSerInfo.FieldType}>(ref {genSerInfo.FieldName}__SaintsSerialized__, {genSerInfo.FieldName}, typeof({genSerInfo.FieldType}));\n");
            //                         //                 break;
            //                         //             default:
            //                         //                 throw new ArgumentOutOfRangeException();
            //                         //         }
            //                         //     }
            //                         //     sourceBuilder.Append("        }\n");
            //                         //
            //                         //     sourceBuilder.Append("        public void OnAfterDeserialize()\n");
            //                         //     sourceBuilder.Append("        {\n");
            //                         //     foreach (GenSerInfo genSerInfo in genSerInfos)
            //                         //     {
            //                         //         switch (genSerInfo.CollectionType)
            //                         //         {
            //                         //             case CollectionType.None:
            //                         //                 sourceBuilder.Append(
            //                         //                     $"            {genSerInfo.FieldName} = ({genSerInfo.FieldType})global::SaintsField.Utils.SaintsSerializedUtil.OnAfterDeserialize({genSerInfo.FieldName}__SaintsSerialized__, typeof({genSerInfo.FieldType}));\n");
            //                         //                 break;
            //                         //             case CollectionType.Array:
            //                         //                 sourceBuilder.Append("\n");
            //                         //                 sourceBuilder.Append($"            (bool {genSerInfo.FieldName}SaintsFieldFilled, {genSerInfo.FieldType}[] {genSerInfo.FieldName}SaintsFieldResult) = global::SaintsField.Utils.SaintsSerializedUtil.OnAfterDeserializeArray<{genSerInfo.FieldType}>({genSerInfo.FieldName}, {genSerInfo.FieldName}__SaintsSerialized__, typeof({genSerInfo.FieldType}));\n");
            //                         //                 sourceBuilder.Append($"            if(!{genSerInfo.FieldName}SaintsFieldFilled)\n");
            //                         //                 sourceBuilder.Append("            {\n");
            //                         //                 sourceBuilder.Append($"                {genSerInfo.FieldName} = {genSerInfo.FieldName}SaintsFieldResult;\n");
            //                         //                 sourceBuilder.Append("            }\n");
            //                         //                 break;
            //                         //             case CollectionType.List:
            //                         //                 sourceBuilder.Append("\n");
            //                         //                 sourceBuilder.Append($"            (bool {genSerInfo.FieldName}SaintsFieldFilled, global::System.Collections.Generic.List<{genSerInfo.FieldType}> {genSerInfo.FieldName}SaintsFieldResult) = global::SaintsField.Utils.SaintsSerializedUtil.OnAfterDeserializeList<{genSerInfo.FieldType}>({genSerInfo.FieldName}, {genSerInfo.FieldName}__SaintsSerialized__, typeof({genSerInfo.FieldType}));\n");
            //                         //                 sourceBuilder.Append($"            if(!{genSerInfo.FieldName}SaintsFieldFilled)\n");
            //                         //                 sourceBuilder.Append("            {\n");
            //                         //                 sourceBuilder.Append($"                {genSerInfo.FieldName} = {genSerInfo.FieldName}SaintsFieldResult;\n");
            //                         //                 sourceBuilder.Append("            }\n");
            //                         //                 break;
            //                         //             default:
            //                         //                 throw new ArgumentOutOfRangeException();
            //                         //         }
            //                         //
            //                         //     }
            //                         //     sourceBuilder.Append("        }\n");
            //                         //
            //                         //     sourceBuilder.Append("    }\n}");
            //                         //     context.AddSource($"{classDeclaration.Identifier.Text}.SaintsSerialized.cs",
            //                         //         SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
            //                         // }
            //
            //                     }
            //                 }
            //                     break;
            //             }
            //         }
            //     }
            // }
            // catch (Exception e)
            // {
            //     DebugToFile(e.Message);
            //     DebugToFile(e.StackTrace);
            // }
        }

        private static void WriteSubInfo(GenInfo gi, StringBuilder sourceBuilder)
        {
            sourceBuilder.Append(
                $"{Indent.GetIndentString()}{gi.Keyword} partial {(gi.IsStruct? "struct": "class")} {gi.Name}");
            if (gi.SerializedInfos.Count > 0)
            {
                sourceBuilder.Append(": global::UnityEngine.ISerializationCallbackReceiver");
            }
            sourceBuilder.Append("\n");
            sourceBuilder.Append($"{Indent.GetIndentString()}{{\n");


            using (new Indent())
            {
                if (gi.SerializedInfos.Count > 0)
                {
                    foreach (SerializedInfo subField in gi.SerializedInfos)
                    {
                        WriteSerializedInfoFields(sourceBuilder, subField, gi.IsStruct, Array.Empty<SerializedInfo>());
                    }

                    string subIndentString = Indent.GetIndentString();
                    sourceBuilder.Append($"{subIndentString}public void OnBeforeSerialize()\n");
                    sourceBuilder.Append($"{subIndentString}{{\n");
                    using (new Indent())
                    {
                        foreach (SerializedInfo serializedInfo in gi.SerializedInfos)
                        {
                            WriteOnBeforeSerialize(serializedInfo, sourceBuilder);
                        }
                    }

                    sourceBuilder.Append($"{subIndentString}}}\n");

                    sourceBuilder.Append($"{subIndentString}public void OnAfterDeserialize()\n");
                    sourceBuilder.Append($"{subIndentString}{{\n");
                    using (new Indent())
                    {
                        foreach (SerializedInfo serializedInfo in gi.SerializedInfos)
                        {
                            WriteOnAfterDeserialize(serializedInfo, sourceBuilder);
                        }
                    }

                    sourceBuilder.Append($"{subIndentString}}}\n");

                    // sourceBuilder.Append(
                    //     $"{Indent.GetIndentString()}public static string GeneratedStringSaintsField() => \"This is generated in {System.DateTime.Now:O}\";\n");

                }

                foreach (GenInfo giSubType in gi.SubTypes)
                {
                    WriteSubInfo(giSubType, sourceBuilder);
                }
            }
            sourceBuilder.Append($"{Indent.GetIndentString()}}}\n");
        }

        private static string MakeNameBase(IEnumerable<SerializedInfo> prePathChains)
        {
            return string.Join("__", prePathChains.Select(each => each.Name));
        }

        private static void WriteSerializedInfoFields(StringBuilder sourceBuilder, SerializedInfo serializedInfo, bool isUnderValuedType, IReadOnlyList<SerializedInfo> prePathChains)
        {
            // if (serializedInfo.SubFields.Count == 0)
            // if (serializedInfo.TargetCollection == SaintsTargetCollection.List || serializedInfo.TargetCollection == SaintsTargetCollection.Array || serializedInfo.SubFields.Count == 0)
            {
                // Debug.Assert(serializedInfo.SaintsPropertyType != SaintsPropertyType.ClassOrStruct);
                // Debug.Assert(serializedInfo.SaintsPropertyType != SaintsPropertyType.Undefined);
                switch (serializedInfo.SaintsPropertyType)
                {
                    case SaintsPropertyType.EnumLong:
                    case SaintsPropertyType.EnumULong:
                    {
                        sourceBuilder.Append($"{Indent.GetIndentString()}[global::SaintsField.Utils.SaintsSerializedActual(typeof(global::{serializedInfo.ElementTypeName})");

                        SerializedInfo[] represent = prePathChains.Append(serializedInfo).ToArray();
                        using (new Indent())
                        {
                            foreach (SerializedInfo eachPre in represent)
                            {
                                sourceBuilder.Append($",\n{Indent.GetIndentString()}{eachPre.ToAttrCompactString()}");
                            }
                        }

                        // sourceBuilder.Append(string.Join(",\n", represent.Select(each => $"            {each}")));

                        sourceBuilder.Append($"\n{Indent.GetIndentString()})]\n");
                        sourceBuilder.Append($"{Indent.GetIndentString()}[global::UnityEngine.SerializeField]\n");
                        sourceBuilder.Append($"{Indent.GetIndentString()}[global::SaintsField.SaintsRow(inline: true)]\n");
                        // ReSharper disable once ConvertIfStatementToConditionalTernaryExpression
                        string nameBase = MakeNameBase(represent);
                        if(serializedInfo.TargetCollection == SaintsTargetCollection.FieldOrProperty)
                        {
                            sourceBuilder.Append(
                                $"{Indent.GetIndentString()}private global::SaintsField.SaintsSerialization.SaintsSerializedProperty {nameBase}__SaintsSerialized__");
                            if (!isUnderValuedType)
                            {
                                sourceBuilder.Append(
                                    " = new global::SaintsField.SaintsSerialization.SaintsSerializedProperty()");
                            }
                            // ReSharper disable once ExtractCommonBranchingCode
                            sourceBuilder.Append(";\n");
                        }
                        else
                        {
                            sourceBuilder.Append($"{Indent.GetIndentString()}private global::SaintsField.SaintsSerialization.SaintsSerializedProperty[] {nameBase}__SaintsSerialized__");
                            if (!isUnderValuedType)
                            {
                                sourceBuilder.Append(
                                    $" = global::System.Array.Empty<global::SaintsField.SaintsSerialization.SaintsSerializedProperty>()");
                            }
                            sourceBuilder.Append(";\n");
                        }

                        sourceBuilder.Append("\n");
                    }
                        break;
                    // case SaintsPropertyType.ClassOrStruct:
                    // case SaintsPropertyType.Undefined:
                    // default:
                    //     throw new ArgumentOutOfRangeException(nameof(serializedInfo.SaintsPropertyType), serializedInfo.SaintsPropertyType, null);
                }

                return;
            }

            // foreach (SerializedInfo subField in serializedInfo.SubFields)
            // {
            //     WriteSerializedInfoFields(sourceBuilder, subField, prePathChains.Append(serializedInfo).ToArray());
            // }
        }

        private static void WriteOnBeforeSerialize(SerializedInfo serializedInfo, StringBuilder sourceBuilder)
        {
            if(serializedInfo.TargetCollection != SaintsTargetCollection.FieldOrProperty)
            {
                sourceBuilder.Append("\n");
                sourceBuilder.Append($"{Indent.GetIndentString()}if ({serializedInfo.Name} == null)\n");
                sourceBuilder.Append($"{Indent.GetIndentString()}{{\n");
                using(new Indent())
                {
                    sourceBuilder.Append($"{Indent.GetIndentString()}{serializedInfo.Name} = ");
                    switch (serializedInfo.TargetCollection)
                    {
                        case SaintsTargetCollection.Array:
                            sourceBuilder.Append("global::System.Array.Empty<");
                            sourceBuilder.Append($"global::{serializedInfo.ElementTypeName}");
                            sourceBuilder.Append(">();\n");
                            break;
                        case SaintsTargetCollection.List:
                            sourceBuilder.Append("new global::System.Collections.Generic.List<");
                            sourceBuilder.Append($"global::{serializedInfo.ElementTypeName}");
                            sourceBuilder.Append(">();\n");
                            break;
                    }
                }
                sourceBuilder.Append($"{Indent.GetIndentString()}}}\n");
            }

            if(serializedInfo.SubFields.Count == 0)
            {
                switch (serializedInfo.TargetCollection)
                {
                    case SaintsTargetCollection.FieldOrProperty:
                        sourceBuilder.Append(
                            $"{Indent.GetIndentString()}{serializedInfo.Name}__SaintsSerialized__ = global::SaintsField.Utils.SaintsSerializedUtil.OnBeforeSerialize({serializedInfo.Name}, typeof(global::{serializedInfo.ElementTypeName}));\n");
                        break;
                    case SaintsTargetCollection.Array:
                    case SaintsTargetCollection.List:
                        sourceBuilder.Append(
                            $"{Indent.GetIndentString()}global::SaintsField.Utils.SaintsSerializedUtil.OnBeforeSerializeCollection<global::{serializedInfo.ElementTypeName}>(ref {serializedInfo.Name}__SaintsSerialized__, {serializedInfo.Name}, typeof(global::{serializedInfo.ElementTypeName}));\n");
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            }
        }

        private static void WriteOnAfterDeserialize(SerializedInfo serializedInfo, StringBuilder sourceBuilder)
        {
            if(serializedInfo.SubFields.Count == 0)
            {
                switch (serializedInfo.TargetCollection)
                {
                    case SaintsTargetCollection.FieldOrProperty:
                        sourceBuilder.Append(
                            $"{Indent.GetIndentString()}{serializedInfo.Name} = global::SaintsField.Utils.SaintsSerializedUtil.OnAfterDeserialize<{serializedInfo.ElementTypeName}>({serializedInfo.Name}__SaintsSerialized__, typeof(global::{serializedInfo.ElementTypeName}));\n");
                        break;
                    case SaintsTargetCollection.Array:
                        sourceBuilder.Append("\n");
                        sourceBuilder.Append(
                            $"{Indent.GetIndentString()}(bool {serializedInfo.Name}SaintsFieldFilled, global::{serializedInfo.ElementTypeName}[] {serializedInfo.Name}SaintsFieldResult) = global::SaintsField.Utils.SaintsSerializedUtil.OnAfterDeserializeArray<global::{serializedInfo.ElementTypeName}>({serializedInfo.Name}, {serializedInfo.Name}__SaintsSerialized__, typeof(global::{serializedInfo.ElementTypeName}));\n");
                        sourceBuilder.Append($"{Indent.GetIndentString()}if(!{serializedInfo.Name}SaintsFieldFilled)\n");
                        sourceBuilder.Append($"{Indent.GetIndentString()}{{\n");
                        sourceBuilder.Append(
                            $"{Indent.GetIndentString()}    {serializedInfo.Name} = {serializedInfo.Name}SaintsFieldResult;\n");
                        sourceBuilder.Append($"{Indent.GetIndentString()}}}\n");
                        break;
                    case SaintsTargetCollection.List:
                        sourceBuilder.Append("\n");
                        sourceBuilder.Append(
                            $"{Indent.GetIndentString()}(bool {serializedInfo.Name}SaintsFieldFilled, global::System.Collections.Generic.List<global::{serializedInfo.ElementTypeName}> {serializedInfo.Name}SaintsFieldResult) = global::SaintsField.Utils.SaintsSerializedUtil.OnAfterDeserializeList<global::{serializedInfo.ElementTypeName}>({serializedInfo.Name}, {serializedInfo.Name}__SaintsSerialized__, typeof(global::{serializedInfo.ElementTypeName}));\n");
                        sourceBuilder.Append($"{Indent.GetIndentString()}if(!{serializedInfo.Name}SaintsFieldFilled)\n");
                        sourceBuilder.Append($"{Indent.GetIndentString()}{{\n");
                        sourceBuilder.Append(
                            $"{Indent.GetIndentString()}    {serializedInfo.Name} = {serializedInfo.Name}SaintsFieldResult;\n");
                        sourceBuilder.Append($"{Indent.GetIndentString()}}}\n");
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            }
        }

        private static SerializedInfo JsonElementToSerializedInfo(JsonElement jsonElement)
        {
            string name = jsonElement.GetProperty("Name").GetString();
            string elementTypeName = jsonElement.GetProperty("ElementTypeName").GetString();
            bool isProperty = jsonElement.GetProperty("IsProperty").GetBoolean();
            SaintsPropertyType saintsPropertyType = (SaintsPropertyType)jsonElement.GetProperty("SaintsPropertyType").GetInt32();
            SaintsTargetCollection targetCollection = (SaintsTargetCollection)jsonElement.GetProperty("TargetCollection").GetInt32();

            JsonElement.ArrayEnumerator subFieldsElement = jsonElement.GetProperty("SubFields").EnumerateArray();
            List<SerializedInfo> subFields = new List<SerializedInfo>();

            // ReSharper disable once ForeachCanBeConvertedToQueryUsingAnotherGetEnumerator
            foreach (JsonElement subElement in subFieldsElement)
            {
                SerializedInfo subSerializedInfo = JsonElementToSerializedInfo(subElement);
                subFields.Add(subSerializedInfo);
            }

            return new SerializedInfo(name, elementTypeName, isProperty, targetCollection, saintsPropertyType, subFields);
        }

        private static string FindAssetPathNotIncluded(string commonPrefix)
        {
            List<string> parts = new List<string>(commonPrefix.Split(new[] { '/', '\\' }, StringSplitOptions.RemoveEmptyEntries));
            while (parts.Count > 0)
            {
                if(parts[parts.Count - 1] == "Assets")
                {
                    List<string> preParts = new List<string>(parts);
                    preParts.RemoveAt(preParts.Count - 1);

                    string joinedPath = string.Join("/", preParts);
                    bool notFound = false;
                    foreach (string subFolder in new[]{"Packages", "ProjectSettings"})
                    {
                        string subPath = $"{joinedPath}/{subFolder}";
                        // DebugToFile(subPath);
                        if (!Directory.Exists(subPath))
                        {
                            notFound = true;
                            break;
                            // return joinedPath;
                        }
                    }

                    if (!notFound)
                    {
                        return joinedPath;
                    }
                }
                parts.RemoveAt(parts.Count - 1);
            }

            // DebugToFile($"Failed to find any asset folder in {commonPrefix}");
            return string.Empty;
        }

        private enum CollectionType
        {
            None,
            Array,
            List,
        }

        private readonly struct GenSerInfo
        {
            // public readonly bool IsProperty;
            public readonly CollectionType CollectionType;
            public readonly string FieldType;
            public readonly string FieldName;
            public readonly ICollection<string> Attributes;

            public GenSerInfo(string fieldType, string fieldName, ICollection<string> attributes)
            {
                // IsProperty = isProperty;
                if (fieldType.EndsWith("[]"))
                {
                    CollectionType = CollectionType.Array;
                    FieldType = fieldType.Substring(0, fieldType.Length - 2);
                }
                else if(fieldType.StartsWith("List<") && fieldType.EndsWith(">"))
                {
                    CollectionType = CollectionType.List;
                    FieldType = fieldType.Substring(5, fieldType.Length - 6);
                }
                else
                {
                    CollectionType = CollectionType.None;
                    FieldType = fieldType;
                }
                FieldName = fieldName;
                Attributes = attributes;
            }
        }

        private ICollection<string> FoundGenSerInfo(SyntaxList<AttributeListSyntax> attributes)
        {
            bool foundSaintsSerialized = false;
            List<string> extraAttributes = new List<string>();

            foreach (AttributeListSyntax attributeList in attributes)
            {
                foreach (AttributeSyntax attributeSyntax in attributeList.Attributes)
                {
                    DebugToFile(attributeSyntax.Name.ToString());
                    string attrName = attributeSyntax.Name.ToString();
                    if(attrName == "SaintsField.Playa.SaintsSerialized" || attrName == "Playa.SaintsSerialized" || attrName == "SaintsSerialized")
                    {
                        foundSaintsSerialized = true;
                        // DebugToFile($"Found SaintsSerialized on {variable.Identifier.Text}");
                        //
                        // genSerInfos.Add(new GenSerInfo(varType.ToString(),
                        //     variable.Identifier.Text
                        // ));
                    }
                    else if(attrName == "NonSerialized" || attrName == "System.NonSerialized" || attrName == "global::System.NonSerialized"
                            || attrName == "SerializeField" || attrName == "UnityEngine.SerializeField" || attrName == "global::UnityEngine.SerializeField")
                    {
                        // ignore
                    }
                    else
                    {
                        extraAttributes.Add(attrName);
                    }
                }
            }

            return foundSaintsSerialized
                ? extraAttributes
                : null;
        }


        public void Initialize(GeneratorInitializationContext context)
        {
        }

        public static string LongestCommonPrefix(IReadOnlyList<string> strs)
        {
            if (strs == null || strs.Count == 0)
            {
                return string.Empty;
            }

            string prefix = strs[0];
            for (int i = 1; i < strs.Count; i++)
            {
                int j = 0;
                while (j < prefix.Length && j < strs[i].Length && prefix[j] == strs[i][j])
                {
                    j++;
                }
                prefix = prefix.Substring(0, j);
                if (prefix == string.Empty) break;
            }
            return prefix;
        }

        public static string CreateMD5(string input)
        {
            // Use input string to calculate MD5 hash
            // ReSharper disable once ConvertToUsingDeclaration
            using (System.Security.Cryptography.MD5 md5 = System.Security.Cryptography.MD5.Create())
            {
                byte[] inputBytes = Encoding.ASCII.GetBytes(input);
                byte[] hashBytes = md5.ComputeHash(inputBytes);

                // return Convert.ToHexString(hashBytes); // .NET 5 +

                // Convert the byte array to hexadecimal string prior to .NET 5
                StringBuilder sb = new StringBuilder();
                foreach (byte hashByte in hashBytes)
                {
                    sb.Append(hashByte.ToString("X2"));
                }
                return sb.ToString();
            }
        }

        private static string _tempFolderPath;

        private static void DebugToFile(string toWrite)
        {
#if DEBUG
            if(string.IsNullOrEmpty(_tempFolderPath))
            {
                _tempFolderPath = Path.GetTempPath();
            }

            // const string filePath = @"C:\Users\tyler\AppData\Local\Temp\SaintsDebug.txt";
            string tempFilePath = Path.Combine(_tempFolderPath, "SaintsDebug.txt");
            using (StreamWriter writer = new StreamWriter(tempFilePath, true, Encoding.UTF8))
            {
                writer.WriteLine(toWrite);
            }
#endif
        }

    }

    public class Indent : IDisposable
    {
        public static int Level { get; private set; } = 0;

        public Indent()
        {
            Level++;
        }

        public void Dispose()
        {
            Level--;
        }

        public static string GetIndentString()
        {
            return new string(' ', Level * 4);
        }
    }

    public class WriteNameSpace : IDisposable
    {
        private readonly bool _enabled = true;
        private readonly StringBuilder _sb;

        public WriteNameSpace(string giNamespace, StringBuilder sb)
        {
            if (string.IsNullOrEmpty(giNamespace))
            {
                _enabled = false;
                return;
            }

            _sb = sb;
            sb.Append($"namespace {giNamespace}\n{{\n");
        }

        public void Dispose()
        {
            if (_enabled)
            {
                _sb.Append("}\n");
            }
        }
    }
}
